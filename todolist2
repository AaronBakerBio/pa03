from todolist import TodoList
import sys
import datetime #used for date comprehension 

# here are some helper functions ...
p_states = ["quit", "show categories", "add category", "modify category", "show transactions", "add transaction", "delete transaction", "summarize transactions by date", "summarize transactions by month", "summarize transactions by year", "summarize transactions by category", "print this menu"]

class IllegalDateField(Exception):
    """Raise when backend attempts to go down an out of bounds flow path for date, may only be 0, 1 or 2"""

def valid_num(message):
    num = ""
    while type(num) != int:
        try:
            num = int(num)
        except ValueError:
            num = input(message)
    return num

def validate_date(flow_path:int):
    while True:
        try:
            print("Please enter a valid ",end = "")
            if flow_path == 0:
                mydate = input("day")
                datetime.date(year=2022, month=1, day=int(mydate))
                return mydate
            elif flow_path == 1:
                my_date = input("month")
                datetime.date(year=2022, month=int(my_date), day=1)
                return my_date
            elif flow_path == 2:
                my_date = input("year")
                datetime.date(year = int(my_date), month = 1, day = 1)
                return my_date
            else:
                raise IllegalDateField("Cannot have date that is not part of day, month, year")
        except ValueError:
            print("Please correct the date field")

            
def print_usage():
    ''' print an explanation of how to use this command '''
    count  = 0
    for x in p_states:
        print(str(count) + ". "+ x)
        count += 1
        
def print_todos(todos):
    ''' print the todo items '''
    if len(todos)==0:
        print('no tasks to print')
        return
    print('\n')
    print("%-10s %-10s %-30s %-10s"%('item #','title','desc','completed'))
    print('-'*40)
    for item in todos:
        values = tuple(item.values()) #(rowid,title,desc,completed)
        print("%-10s %-10s %-30s %2d"%values)

def print_categories(categories):
    if len(categories) == 0:
        print("No categories entered")
    else:
        print("Categories")
        print('-' * 10)
        category = set(*categories)
        for x in category:
            print(x)



def process_args(arglist):
    ''' examine args and make appropriate calls to TodoList'''
    todolist = TodoList()
    arg = arglist
    if arglist == None:
        print_usage()

    elif arg == p_states[0]:
        print("goodbye")

    elif arg == p_states[1]:
        #vanilla 
        print_categories(todolist.selectCategories())
    elif arg == p_states[2]:
        category = input("Please enter a category")
        catbool = todolist.add_category(category)
        if catbool is True:
            print("This category already exists")
        else:
            print("Category added")
    elif arg == p_states[5]:
        #add transaction
        arg = arg.removeprefix(p_states[2] + " ")
        arg = arg.split()
        task = {}
        task['item #'] = valid_num("Please enter a valid item # ")
        task['amount'] = valid_num("Please enter the amount ")
        task['category'] = input("Please enter a category ")
        day = validate_date(0)
        print(day)
        month = validate_date(1)
        print(month)
        year = validate_date(2)
        print(year)
        task['date'] = datetime.date(year=int(year), month=int(month), day=int(day))
        task['description'] = input("Please enter a description")
        todolist.add(task)
        
    elif arg == p_states[4]:
        print_todos(todolist.selectAll())
        
    #deletion
    elif arg.startswith(p_states[6]):
        arg = arg.lstrip(p_states[6])
        todolist.delete(arg)
    
    else:
        print_usage()   


    
def main():
    if len(sys.argv) == 1:
        print_usage()
        args = ""
        while args != 'quit':
            args = input("Enter a choice ")
            process_args(args)
            print('-'*40+'\n'*3)
    else:
        # read the args and process them
        args = sys.argv[1:]
        process_args(args)
        print('-'*40+'\n'*3)

if __name__ == "__main__":
    main()

